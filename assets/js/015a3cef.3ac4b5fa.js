"use strict";(self.webpackChunkkubeblocks_io=self.webpackChunkkubeblocks_io||[]).push([[3692],{3905:(e,t,r)=>{r.d(t,{Zo:()=>u,kt:()=>g});var n=r(67294);function i(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){i(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,i=function(e,t){if(null==e)return{};var r,n,i={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(i[r]=e[r]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(i[r]=e[r])}return i}var c=n.createContext({}),l=function(e){var t=n.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},u=function(e){var t=l(e.components);return n.createElement(c.Provider,{value:t},e.children)},m="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,i=e.mdxType,a=e.originalType,c=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),m=l(r),d=i,g=m["".concat(c,".").concat(d)]||m[d]||p[d]||a;return r?n.createElement(g,o(o({ref:t},u),{},{components:r})):n.createElement(g,o({ref:t},u))}));function g(e,t){var r=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=r.length,o=new Array(a);o[0]=d;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s[m]="string"==typeof e?e:i,o[1]=s;for(var l=2;l<a;l++)o[l]=r[l];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},57260:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>p,frontMatter:()=>a,metadata:()=>s,toc:()=>l});var n=r(87462),i=(r(67294),r(3905));const a={title:"kbcli migration create"},o=void 0,s={unversionedId:"user_docs/cli/kbcli_migration_create",id:"user_docs/cli/kbcli_migration_create",title:"kbcli migration create",description:"Create a migration task.",source:"@site/docs/user_docs/cli/kbcli_migration_create.md",sourceDirName:"user_docs/cli",slug:"/user_docs/cli/kbcli_migration_create",permalink:"/docs/preview/user_docs/cli/kbcli_migration_create",draft:!1,editUrl:"https://github.com/apecloud/kubeblocks/tree/main/docs/user_docs/cli/kbcli_migration_create.md",tags:[],version:"current",frontMatter:{title:"kbcli migration create"},sidebar:"docs",previous:{title:"kbcli migration",permalink:"/docs/preview/user_docs/cli/kbcli_migration"},next:{title:"kbcli migration describe",permalink:"/docs/preview/user_docs/cli/kbcli_migration_describe"}},c={},l=[{value:"Examples",id:"examples",level:3},{value:"Options",id:"options",level:3},{value:"Options inherited from parent commands",id:"options-inherited-from-parent-commands",level:3},{value:"SEE ALSO",id:"see-also",level:3},{value:"Go Back to CLI Overview Homepage.",id:"go-back-to-cli-overview-homepage",level:4}],u={toc:l},m="wrapper";function p(e){let{components:t,...r}=e;return(0,i.kt)(m,(0,n.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Create a migration task."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"kbcli migration create NAME [flags]\n")),(0,i.kt)("h3",{id:"examples"},"Examples"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'  # Create a migration task to migrate the entire database under mysql: mydb1 and mytable1 under database: mydb2 to the target mysql\n  kbcli migration create mytask --template apecloud-mysql2mysql\n  --source user:123456@127.0.0.1:3306\n  --sink user:123456@127.0.0.1:3305\n  --migration-object \'"mydb1","mydb2.mytable1"\'\n  \n  # Create a migration task to migrate the schema: myschema under database: mydb1 under PostgreSQL to the target PostgreSQL\n  kbcli migration create mytask --template apecloud-pg2pg\n  --source user:123456@127.0.0.1:3306/mydb1\n  --sink user:123456@127.0.0.1:3305/mydb1\n  --migration-object \'"myschema"\'\n  \n  # Use prechecks, data initialization, CDC, but do not perform structure initialization\n  kbcli migration create mytask --template apecloud-pg2pg\n  --source user:123456@127.0.0.1:3306/mydb1\n  --sink user:123456@127.0.0.1:3305/mydb1\n  --migration-object \'"myschema"\'\n  --steps precheck=true,init-struct=false,init-data=true,cdc=true\n  \n  # Create a migration task with two tolerations\n  kbcli migration create mytask --template apecloud-pg2pg\n  --source user:123456@127.0.0.1:3306/mydb1\n  --sink user:123456@127.0.0.1:3305/mydb1\n  --migration-object \'"myschema"\'\n  --tolerations \'"step=global,key=engineType,value=pg,operator=Equal,effect=NoSchedule","step=init-data,key=diskType,value=ssd,operator=Equal,effect=NoSchedule"\'\n  \n  # Limit resource usage when performing data initialization\n  kbcli migration create mytask --template apecloud-pg2pg\n  --source user:123456@127.0.0.1:3306/mydb1\n  --sink user:123456@127.0.0.1:3305/mydb1\n  --migration-object \'"myschema"\'\n  --resources \'"step=init-data,cpu=1000m,memory=1Gi"\'\n')),(0,i.kt)("h3",{id:"options"},"Options"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'  -h, --help                       help for create\n      --migration-object strings   Set the data objects that need to be migrated,such as \'"db1.table1","db2"\'\n      --resources strings          Resources limit for migration, such as \'"cpu=3000m,memory=3Gi"\'\n      --sink string                Set the sink database information for migration.such as \'{username}:{password}@{connection_address}:{connection_port}/[{database}]\n      --source string              Set the source database information for migration.such as \'{username}:{password}@{connection_address}:{connection_port}/[{database}]\'\n      --steps strings              Set up migration steps,such as: precheck=true,init-struct=true,init-data=true,cdc=true\n      --template string            Specify migration template, run "kbcli migration templates" to show all available migration templates\n      --tolerations strings        Tolerations for migration, such as \'"key=engineType,value=pg,operator=Equal,effect=NoSchedule"\'\n')),(0,i.kt)("h3",{id:"options-inherited-from-parent-commands"},"Options inherited from parent commands"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'      --as string                      Username to impersonate for the operation. User could be a regular user or a service account in a namespace.\n      --as-group stringArray           Group to impersonate for the operation, this flag can be repeated to specify multiple groups.\n      --as-uid string                  UID to impersonate for the operation.\n      --cache-dir string               Default cache directory (default "$HOME/.kube/cache")\n      --certificate-authority string   Path to a cert file for the certificate authority\n      --client-certificate string      Path to a client certificate file for TLS\n      --client-key string              Path to a client key file for TLS\n      --cluster string                 The name of the kubeconfig cluster to use\n      --context string                 The name of the kubeconfig context to use\n      --disable-compression            If true, opt-out of response compression for all requests to the server\n      --insecure-skip-tls-verify       If true, the server\'s certificate will not be checked for validity. This will make your HTTPS connections insecure\n      --kubeconfig string              Path to the kubeconfig file to use for CLI requests.\n      --match-server-version           Require server version to match client version\n  -n, --namespace string               If present, the namespace scope for this CLI request\n      --request-timeout string         The length of time to wait before giving up on a single server request. Non-zero values should contain a corresponding time unit (e.g. 1s, 2m, 3h). A value of zero means don\'t timeout requests. (default "0")\n  -s, --server string                  The address and port of the Kubernetes API server\n      --tls-server-name string         Server name to use for server certificate validation. If it is not provided, the hostname used to contact the server is used\n      --token string                   Bearer token for authentication to the API server\n      --user string                    The name of the kubeconfig user to use\n')),(0,i.kt)("h3",{id:"see-also"},"SEE ALSO"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/docs/preview/user_docs/cli/kbcli_migration"},"kbcli migration"),"\t - Data migration between two data sources.")),(0,i.kt)("h4",{id:"go-back-to-cli-overview-homepage"},"Go Back to ",(0,i.kt)("a",{parentName:"h4",href:"/docs/preview/user_docs/cli/"},"CLI Overview")," Homepage."))}p.isMDXComponent=!0}}]);