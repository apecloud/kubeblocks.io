"use strict";(self.webpackChunkkubeblocks_io=self.webpackChunkkubeblocks_io||[]).push([[7162],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>k});var r=n(67294);function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,l=function(e,t){if(null==e)return{};var n,r,l={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(l[n]=e[n]);return l}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}var s=r.createContext({}),u=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=u(e.components);return r.createElement(s.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},b=r.forwardRef((function(e,t){var n=e.components,l=e.mdxType,a=e.originalType,s=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),p=u(n),b=l,k=p["".concat(s,".").concat(b)]||p[b]||d[b]||a;return n?r.createElement(k,o(o({ref:t},c),{},{components:n})):r.createElement(k,o({ref:t},c))}));function k(e,t){var n=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var a=n.length,o=new Array(a);o[0]=b;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i[p]="string"==typeof e?e:l,o[1]=i;for(var u=2;u<a;u++)o[u]=n[u];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}b.displayName="MDXCreateElement"},13463:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>d,frontMatter:()=>a,metadata:()=>i,toc:()=>u});var r=n(87462),l=(n(67294),n(3905));const a={},o=void 0,i={unversionedId:"user_docs/kubeblocks-for-gptplugin/Installation",id:"user_docs/kubeblocks-for-gptplugin/Installation",title:"Installation",description:"Installation of ChatGPT Retrieval Plugin on KubeBlocks",source:"@site/docs/user_docs/kubeblocks-for-gptplugin/Installation.md",sourceDirName:"user_docs/kubeblocks-for-gptplugin",slug:"/user_docs/kubeblocks-for-gptplugin/Installation",permalink:"/docs/preview/user_docs/kubeblocks-for-gptplugin/Installation",draft:!1,editUrl:"https://github.com/apecloud/kubeblocks/tree/main/docs/user_docs/kubeblocks-for-gptplugin/Installation.md",tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"README",permalink:"/docs/preview/user_docs/"},next:{title:"Introduction",permalink:"/docs/preview/user_docs/kubeblocks-for-gptplugin/Introduction"}},s={},u=[{value:"Installation of ChatGPT Retrieval Plugin on KubeBlocks",id:"installation-of-chatgpt-retrieval-plugin-on-kubeblocks",level:2},{value:"Requirements from OpenAI",id:"requirements-from-openai",level:3},{value:"Requirements from KubeBlocks",id:"requirements-from-kubeblocks",level:3},{value:"Installation",id:"installation",level:3},{value:"Step 1: Create a vector database with kbcli",id:"step-1-create-a-vector-database-with-kbcli",level:4},{value:"Step 2: Start the plugin with qdrant as store",id:"step-2-start-the-plugin-with-qdrant-as-store",level:4},{value:"Step 3: Port-forward the Plugin Portal",id:"step-3-port-forward-the-plugin-portal",level:4}],c={toc:u},p="wrapper";function d(e){let{components:t,...n}=e;return(0,l.kt)(p,(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h2",{id:"installation-of-chatgpt-retrieval-plugin-on-kubeblocks"},"Installation of ChatGPT Retrieval Plugin on KubeBlocks"),(0,l.kt)("h3",{id:"requirements-from-openai"},"Requirements from OpenAI"),(0,l.kt)("p",null,"Two prerequisites are needed for running the Plugin:",(0,l.kt)("br",{parentName:"p"}),"\n","The Plugin authorities from OpenAI, if none, you can join the ",(0,l.kt)("a",{parentName:"p",href:"https://openai.com/waitlist/plugins"},"waiting list here"),".",(0,l.kt)("br",{parentName:"p"}),"\n","An OPENAI_API_KEY for the Plugin to call OpenAI embedding APIs. "),(0,l.kt)("h3",{id:"requirements-from-kubeblocks"},"Requirements from KubeBlocks"),(0,l.kt)("p",null,"Kbcli & the latest KubeBlocks edition are installed.\nTODO: the installation part of kbcli & kb."),(0,l.kt)("h3",{id:"installation"},"Installation"),(0,l.kt)("h4",{id:"step-1-create-a-vector-database-with-kbcli"},"Step 1: Create a vector database with kbcli"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"List Addons of KubeBlocks, each vector database is an addon in KubeBlocks")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"kbcli addon list \n")),(0,l.kt)("ol",{start:2},(0,l.kt)("li",{parentName:"ol"},"If not enabled, enable it with")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"kbcli addon enable qdrant \n")),(0,l.kt)("p",null,"waiting for the addon from 'enabling' to 'enabled'\n3. When enabled successfully, you can check it with"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"kbcli addon list \nkubectl get clusterdefintion\n\nNAME                MAIN-COMPONENT-NAME   STATUS      AGE\nqdrant              qdrant                Available   6m14s\n")),(0,l.kt)("ol",{start:4},(0,l.kt)("li",{parentName:"ol"},"create a qdrant cluster")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"kbcli cluster create  --cluster-definition=qdrant\n\nWarning: cluster version is not specified, use the recently created ClusterVersion qdrant-1.1.0\nCluster lilac26 created\n")),(0,l.kt)("p",null,"a qdrant cluster is created successfully"),(0,l.kt)("h4",{id:"step-2-start-the-plugin-with-qdrant-as-store"},"Step 2: Start the plugin with qdrant as store"),(0,l.kt)("p",null,"with helm to install "),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"helm install gptplugin \n--set datastore.DATASTORE=qdrant \n--set datastore.QDRANT_COLLECTION=document_chunks\n--set datastore.QDRANT_URL=http://lilac26-qdrant-headless.default.svc.cluster.local \n--set datastore.QDRANT_PORT=6333 \n--set datastore.BEARER_TOKEN=your_bearer_token\n--set datastore.OPENAI_API_KEY=your_openai_api_key \n--set website.url=your_website_url\n\nkubectl get pods\nNAME                                                  READY   STATUS    RESTARTS     AGE\ngptplugin-chatgpt-retrieval-plugin-647d85498d-jd2bj   1/1     Running   0            10m\n")),(0,l.kt)("h4",{id:"step-3-port-forward-the-plugin-portal"},"Step 3: Port-forward the Plugin Portal"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"kubectl port-forward pod/gptplugin-chatgpt-retrieval-plugin-647d85498d-jd2bj 8081:8080\n")),(0,l.kt)("p",null,"In your web browser, open the plugin portal with"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"http://127.0.0.1:8081/docs\n")))}d.isMDXComponent=!0}}]);