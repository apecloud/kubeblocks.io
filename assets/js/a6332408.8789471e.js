"use strict";(self.webpackChunkkubeblocks_io=self.webpackChunkkubeblocks_io||[]).push([[3885],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>b});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),l=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},d=function(e){var t=l(e.components);return a.createElement(s.Provider,{value:t},e.children)},u="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),u=l(n),m=r,b=u["".concat(s,".").concat(m)]||u[m]||p[m]||o;return n?a.createElement(b,c(c({ref:t},d),{},{components:n})):a.createElement(b,c({ref:t},d))}));function b(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,c=new Array(o);c[0]=m;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i[u]="string"==typeof e?e:r,c[1]=i;for(var l=2;l<o;l++)c[l]=n[l];return a.createElement.apply(null,c)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},48510:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>c,default:()=>p,frontMatter:()=>o,metadata:()=>i,toc:()=>l});var a=n(87462),r=(n(67294),n(3905));const o={title:"Connect database in testing environment",description:"How to connect to a database in testing environment",sidebar_position:2,sidebar_label:"Testing environment"},c="Connect database in testing environment",i={unversionedId:"user_docs/connect_database/connect-database-in-testing-environment",id:"user_docs/connect_database/connect-database-in-testing-environment",title:"Connect database in testing environment",description:"How to connect to a database in testing environment",source:"@site/docs/user_docs/connect_database/connect-database-in-testing-environment.md",sourceDirName:"user_docs/connect_database",slug:"/user_docs/connect_database/connect-database-in-testing-environment",permalink:"/docs/next/user_docs/connect_database/connect-database-in-testing-environment",draft:!1,editUrl:"https://github.com/apecloud/kubeblocks/tree/main/docs/user_docs/connect_database/connect-database-in-testing-environment.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{title:"Connect database in testing environment",description:"How to connect to a database in testing environment",sidebar_position:2,sidebar_label:"Testing environment"},sidebar:"docs",previous:{title:"Overview",permalink:"/docs/next/user_docs/connect_database/overview-of-database-connection"},next:{title:"Production environment",permalink:"/docs/next/user_docs/connect_database/connect-database-in-production-environment"}},s={},l=[{value:"Procedure 1. Use kbcli cluster connect command",id:"procedure-1-use-kbcli-cluster-connect-command",level:2},{value:"Procedure 2. Connect database with CLI or SDK client",id:"procedure-2-connect-database-with-cli-or-sdk-client",level:2}],d={toc:l},u="wrapper";function p(e){let{components:t,...o}=e;return(0,r.kt)(u,(0,a.Z)({},d,o,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"connect-database-in-testing-environment"},"Connect database in testing environment"),(0,r.kt)("h2",{id:"procedure-1-use-kbcli-cluster-connect-command"},"Procedure 1. Use kbcli cluster connect command"),(0,r.kt)("p",null,"You can use the ",(0,r.kt)("inlineCode",{parentName:"p"},"kbcli cluster connect")," command and specify the cluster name to be connected."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"kbcli cluster connect ${cluster-name}\n")),(0,r.kt)("p",null,"The lower-level command is actually ",(0,r.kt)("inlineCode",{parentName:"p"},"kubectl exec"),". The command is functional as long as the K8s API server is accessible."),(0,r.kt)("h2",{id:"procedure-2-connect-database-with-cli-or-sdk-client"},"Procedure 2. Connect database with CLI or SDK client"),(0,r.kt)("p",null,"Execute the following command to get the network information of the targeted database and connect it with the printed IP address."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"kbcli cluster connect --show-example ${cluster-name}\n")),(0,r.kt)("p",null,"Information printed includes database addresses, port No., username, password. The figure below is an example of MySQL database network information."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Address: -h specifies the server address. In the example below it is 127.0.0.1"),(0,r.kt)("li",{parentName:"ul"},"Port: -P specifies port No. , In the example below it is 3306."),(0,r.kt)("li",{parentName:"ul"},"User: -u is the user name."),(0,r.kt)("li",{parentName:"ul"},"Password: -p shows the password. In the example below, it is hQBCKZLI. ")),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"The password does not include -p.")),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Example",src:n(25107).Z,width:"1280",height:"459"})))}p.isMDXComponent=!0},25107:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/connect_database_with_CLI_or_SDK_client-dcf145fbe3239718364e5cdd5409461b.png"}}]);